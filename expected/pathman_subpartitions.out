\set VERBOSITY terse
CREATE EXTENSION pg_pathman;
CREATE SCHEMA subpartitions;
/* Create two level partitioning structure */
CREATE TABLE subpartitions.abc(a INTEGER NOT NULL, b INTEGER NOT NULL);
INSERT INTO subpartitions.abc SELECT i, i FROM generate_series(1, 200, 20) as i;
SELECT create_range_partitions('subpartitions.abc', 'a', 0, 100, 2);
 create_range_partitions 
-------------------------
                       2
(1 row)

SELECT create_hash_partitions('subpartitions.abc_1', 'a', 3);
 create_hash_partitions 
------------------------
                      3
(1 row)

SELECT create_hash_partitions('subpartitions.abc_2', 'b', 2);
 create_hash_partitions 
------------------------
                      2
(1 row)

SELECT * FROM pathman_partition_list;
       parent        |       partition       | parttype | expr | range_min | range_max 
---------------------+-----------------------+----------+------+-----------+-----------
 subpartitions.abc   | subpartitions.abc_1   |        2 | a    | 0         | 100
 subpartitions.abc   | subpartitions.abc_2   |        2 | a    | 100       | 200
 subpartitions.abc_1 | subpartitions.abc_1_0 |        1 | a    |           | 
 subpartitions.abc_1 | subpartitions.abc_1_1 |        1 | a    |           | 
 subpartitions.abc_1 | subpartitions.abc_1_2 |        1 | a    |           | 
 subpartitions.abc_2 | subpartitions.abc_2_0 |        1 | b    |           | 
 subpartitions.abc_2 | subpartitions.abc_2_1 |        1 | b    |           | 
(7 rows)

SELECT tableoid::regclass, * FROM subpartitions.abc ORDER BY a, b;
       tableoid        |  a  |  b  
-----------------------+-----+-----
 subpartitions.abc_1_2 |   1 |   1
 subpartitions.abc_1_0 |  21 |  21
 subpartitions.abc_1_1 |  41 |  41
 subpartitions.abc_1_0 |  61 |  61
 subpartitions.abc_1_2 |  81 |  81
 subpartitions.abc_2_0 | 101 | 101
 subpartitions.abc_2_1 | 121 | 121
 subpartitions.abc_2_0 | 141 | 141
 subpartitions.abc_2_1 | 161 | 161
 subpartitions.abc_2_1 | 181 | 181
(10 rows)

/* Insert should result in creation of new subpartition */
SELECT append_range_partition('subpartitions.abc', 'subpartitions.abc_3');
 append_range_partition 
------------------------
 subpartitions.abc_3
(1 row)

SELECT create_range_partitions('subpartitions.abc_3', 'b', 200, 10, 2);
 create_range_partitions 
-------------------------
                       2
(1 row)

SELECT * FROM pathman_partition_list WHERE parent = 'subpartitions.abc_3'::regclass;
       parent        |       partition       | parttype | expr | range_min | range_max 
---------------------+-----------------------+----------+------+-----------+-----------
 subpartitions.abc_3 | subpartitions.abc_3_1 |        2 | b    | 200       | 210
 subpartitions.abc_3 | subpartitions.abc_3_2 |        2 | b    | 210       | 220
(2 rows)

INSERT INTO subpartitions.abc VALUES (215, 215);
SELECT * FROM pathman_partition_list WHERE parent = 'subpartitions.abc_3'::regclass;
       parent        |       partition       | parttype | expr | range_min | range_max 
---------------------+-----------------------+----------+------+-----------+-----------
 subpartitions.abc_3 | subpartitions.abc_3_1 |        2 | b    | 200       | 210
 subpartitions.abc_3 | subpartitions.abc_3_2 |        2 | b    | 210       | 220
(2 rows)

SELECT tableoid::regclass, * FROM subpartitions.abc WHERE a = 215 AND b = 215 ORDER BY a, b;
       tableoid        |  a  |  b  
-----------------------+-----+-----
 subpartitions.abc_3_2 | 215 | 215
(1 row)

/* Pruning tests */
EXPLAIN (COSTS OFF) SELECT * FROM subpartitions.abc WHERE a  < 150;
           QUERY PLAN            
---------------------------------
 Append
   ->  Append
         ->  Seq Scan on abc_1_0
         ->  Seq Scan on abc_1_1
         ->  Seq Scan on abc_1_2
   ->  Append
         ->  Seq Scan on abc_2_0
               Filter: (a < 150)
         ->  Seq Scan on abc_2_1
               Filter: (a < 150)
(10 rows)

EXPLAIN (COSTS OFF) SELECT * FROM subpartitions.abc WHERE b  = 215;
           QUERY PLAN            
---------------------------------
 Append
   ->  Append
         ->  Seq Scan on abc_1_0
               Filter: (b = 215)
         ->  Seq Scan on abc_1_1
               Filter: (b = 215)
         ->  Seq Scan on abc_1_2
               Filter: (b = 215)
   ->  Append
         ->  Seq Scan on abc_2_1
               Filter: (b = 215)
   ->  Append
         ->  Seq Scan on abc_3_2
               Filter: (b = 215)
(14 rows)

EXPLAIN (COSTS OFF) SELECT * FROM subpartitions.abc WHERE a  = 215 AND b  = 215;
                   QUERY PLAN                    
-------------------------------------------------
 Append
   ->  Append
         ->  Seq Scan on abc_3_2
               Filter: ((a = 215) AND (b = 215))
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM subpartitions.abc WHERE a >= 210 AND b >= 210;
            QUERY PLAN            
----------------------------------
 Append
   ->  Append
         ->  Seq Scan on abc_3_2
               Filter: (a >= 210)
(4 rows)

CREATE OR REPLACE FUNCTION check_multilevel_queries()
RETURNS VOID AS
$$
BEGIN
	IF NOT EXISTS(SELECT * FROM (SELECT tableoid::regclass, *
				  FROM subpartitions.abc
				  WHERE a = 215 AND b = 215
			      ORDER BY a, b) t1)
	THEN
		RAISE EXCEPTION 'should be at least one record in result';
	END IF;
END
$$ LANGUAGE plpgsql;
SELECT check_multilevel_queries();
 check_multilevel_queries 
--------------------------
 
(1 row)

DROP FUNCTION check_multilevel_queries();
/* Multilevel partitioning with updates */
CREATE OR REPLACE FUNCTION subpartitions.partitions_tree(
	rel REGCLASS,
	level TEXT DEFAULT ' '
)
RETURNS SETOF TEXT AS
$$
DECLARE
	partition REGCLASS;
	subpartition TEXT;
BEGIN
	IF rel IS NULL THEN
		RETURN;
	END IF;

	RETURN NEXT rel::TEXT;

	FOR partition IN (SELECT l.partition FROM pathman_partition_list l WHERE parent = rel)
	LOOP
		FOR subpartition IN (SELECT subpartitions.partitions_tree(partition, level || ' '))
		LOOP
			RETURN NEXT level || subpartition::TEXT;
		END LOOP;
	END LOOP;
END
$$ LANGUAGE plpgsql;
SELECT append_range_partition('subpartitions.abc', 'subpartitions.abc_4');
 append_range_partition 
------------------------
 subpartitions.abc_4
(1 row)

SELECT create_hash_partitions('subpartitions.abc_4', 'b', 2);
 create_hash_partitions 
------------------------
                      2
(1 row)

SELECT subpartitions.partitions_tree('subpartitions.abc');
     partitions_tree      
--------------------------
 subpartitions.abc
  subpartitions.abc_1
    subpartitions.abc_1_0
    subpartitions.abc_1_1
    subpartitions.abc_1_2
  subpartitions.abc_2
    subpartitions.abc_2_0
    subpartitions.abc_2_1
  subpartitions.abc_3
    subpartitions.abc_3_1
    subpartitions.abc_3_2
  subpartitions.abc_4
    subpartitions.abc_4_0
    subpartitions.abc_4_1
(14 rows)

DROP TABLE subpartitions.abc CASCADE;
NOTICE:  drop cascades to 15 other objects
/* Test that update works correctly */
SET pg_pathman.enable_partitionrouter = ON;
CREATE TABLE subpartitions.abc(a INTEGER NOT NULL, b INTEGER NOT NULL);
SELECT create_range_partitions('subpartitions.abc', 'a', 0, 100, 2);
 create_range_partitions 
-------------------------
                       2
(1 row)

SELECT create_range_partitions('subpartitions.abc_1', 'b', 0, 50, 2); /* 0 - 100 */
 create_range_partitions 
-------------------------
                       2
(1 row)

SELECT create_range_partitions('subpartitions.abc_2', 'b', 0, 50, 2); /* 100 - 200 */
 create_range_partitions 
-------------------------
                       2
(1 row)

INSERT INTO subpartitions.abc SELECT 25, 25 FROM generate_series(1, 10);
SELECT tableoid::regclass, * FROM subpartitions.abc;	/* Should be in subpartitions.abc_1_1 */
       tableoid        | a  | b  
-----------------------+----+----
 subpartitions.abc_1_1 | 25 | 25
 subpartitions.abc_1_1 | 25 | 25
 subpartitions.abc_1_1 | 25 | 25
 subpartitions.abc_1_1 | 25 | 25
 subpartitions.abc_1_1 | 25 | 25
 subpartitions.abc_1_1 | 25 | 25
 subpartitions.abc_1_1 | 25 | 25
 subpartitions.abc_1_1 | 25 | 25
 subpartitions.abc_1_1 | 25 | 25
 subpartitions.abc_1_1 | 25 | 25
(10 rows)

UPDATE subpartitions.abc SET a = 125 WHERE a = 25 and b = 25;
SELECT tableoid::regclass, * FROM subpartitions.abc;	/* Should be in subpartitions.abc_2_1 */
       tableoid        |  a  | b  
-----------------------+-----+----
 subpartitions.abc_2_1 | 125 | 25
 subpartitions.abc_2_1 | 125 | 25
 subpartitions.abc_2_1 | 125 | 25
 subpartitions.abc_2_1 | 125 | 25
 subpartitions.abc_2_1 | 125 | 25
 subpartitions.abc_2_1 | 125 | 25
 subpartitions.abc_2_1 | 125 | 25
 subpartitions.abc_2_1 | 125 | 25
 subpartitions.abc_2_1 | 125 | 25
 subpartitions.abc_2_1 | 125 | 25
(10 rows)

UPDATE subpartitions.abc SET b = 75  WHERE a = 125 and b = 25;
SELECT tableoid::regclass, * FROM subpartitions.abc;	/* Should be in subpartitions.abc_2_2 */
       tableoid        |  a  | b  
-----------------------+-----+----
 subpartitions.abc_2_2 | 125 | 75
 subpartitions.abc_2_2 | 125 | 75
 subpartitions.abc_2_2 | 125 | 75
 subpartitions.abc_2_2 | 125 | 75
 subpartitions.abc_2_2 | 125 | 75
 subpartitions.abc_2_2 | 125 | 75
 subpartitions.abc_2_2 | 125 | 75
 subpartitions.abc_2_2 | 125 | 75
 subpartitions.abc_2_2 | 125 | 75
 subpartitions.abc_2_2 | 125 | 75
(10 rows)

UPDATE subpartitions.abc SET b = 125 WHERE a = 125 and b = 75;
SELECT tableoid::regclass, * FROM subpartitions.abc;	/* Should create subpartitions.abc_2_3 */
       tableoid        |  a  |  b  
-----------------------+-----+-----
 subpartitions.abc_2_3 | 125 | 125
 subpartitions.abc_2_3 | 125 | 125
 subpartitions.abc_2_3 | 125 | 125
 subpartitions.abc_2_3 | 125 | 125
 subpartitions.abc_2_3 | 125 | 125
 subpartitions.abc_2_3 | 125 | 125
 subpartitions.abc_2_3 | 125 | 125
 subpartitions.abc_2_3 | 125 | 125
 subpartitions.abc_2_3 | 125 | 125
 subpartitions.abc_2_3 | 125 | 125
(10 rows)

/* split_range_partition */
SELECT split_range_partition('subpartitions.abc_2', 150);
ERROR:  could not split partition if it has children
SELECT split_range_partition('subpartitions.abc_2_2', 75);
 split_range_partition 
-----------------------
 {50,100}
(1 row)

SELECT subpartitions.partitions_tree('subpartitions.abc');
     partitions_tree      
--------------------------
 subpartitions.abc
  subpartitions.abc_1
    subpartitions.abc_1_1
    subpartitions.abc_1_2
  subpartitions.abc_2
    subpartitions.abc_2_1
    subpartitions.abc_2_2
    subpartitions.abc_2_4
    subpartitions.abc_2_3
(9 rows)

/* merge_range_partitions */
SELECT append_range_partition('subpartitions.abc', 'subpartitions.abc_3'); /* 200 - 300 */
 append_range_partition 
------------------------
 subpartitions.abc_3
(1 row)

select merge_range_partitions('subpartitions.abc_2', 'subpartitions.abc_3');
ERROR:  cannot merge partitions
select merge_range_partitions('subpartitions.abc_2_1', 'subpartitions.abc_2_2');
 merge_range_partitions 
------------------------
 
(1 row)

DROP TABLE subpartitions.abc CASCADE;
NOTICE:  drop cascades to 11 other objects
/* subpartitions on same expressions */
CREATE TABLE subpartitions.abc(a INTEGER NOT NULL);
INSERT INTO subpartitions.abc SELECT i FROM generate_series(1, 200, 20) as i;
SELECT create_range_partitions('subpartitions.abc', 'a', 0, 100, 4);
 create_range_partitions 
-------------------------
                       4
(1 row)

SELECT create_range_partitions('subpartitions.abc_1', 'a', 0, 11, 9); /* not multiple */
 create_range_partitions 
-------------------------
                       9
(1 row)

SELECT create_range_partitions('subpartitions.abc_2', 'a', 150, 11, 8); /* start_value should be lower */
WARNING:  "start_value" was set to 100
 create_range_partitions 
-------------------------
                       8
(1 row)

SELECT create_range_partitions('subpartitions.abc_3', 'a', 200, 11, 20); /* too big p_count */
WARNING:  "p_interval" is not multiple of range (200, 310)
NOTICE:  "p_count" was limited to 10
 create_range_partitions 
-------------------------
                      10
(1 row)

SELECT create_range_partitions('subpartitions.abc_4', 'a', ARRAY[301, 350, 400]); /* bounds check */
ERROR:  Bounds should start from 300
SELECT create_range_partitions('subpartitions.abc_4', 'a', ARRAY[300, 450, 500]); /* bounds check */
ERROR:  Lower bound of rightmost partition should be less than 400
SELECT create_range_partitions('subpartitions.abc_4', 'a', ARRAY[300, 350, 450]); /* bounds check */
 create_range_partitions 
-------------------------
                       2
(1 row)

SELECT * FROM pathman_partition_list;
       parent        |       partition        | parttype | expr | range_min | range_max 
---------------------+------------------------+----------+------+-----------+-----------
 subpartitions.abc   | subpartitions.abc_1    |        2 | a    | 0         | 100
 subpartitions.abc   | subpartitions.abc_2    |        2 | a    | 100       | 200
 subpartitions.abc   | subpartitions.abc_3    |        2 | a    | 200       | 300
 subpartitions.abc   | subpartitions.abc_4    |        2 | a    | 300       | 400
 subpartitions.abc_1 | subpartitions.abc_1_1  |        2 | a    | 0         | 11
 subpartitions.abc_1 | subpartitions.abc_1_2  |        2 | a    | 11        | 22
 subpartitions.abc_1 | subpartitions.abc_1_3  |        2 | a    | 22        | 33
 subpartitions.abc_1 | subpartitions.abc_1_4  |        2 | a    | 33        | 44
 subpartitions.abc_1 | subpartitions.abc_1_5  |        2 | a    | 44        | 55
 subpartitions.abc_1 | subpartitions.abc_1_6  |        2 | a    | 55        | 66
 subpartitions.abc_1 | subpartitions.abc_1_7  |        2 | a    | 66        | 77
 subpartitions.abc_1 | subpartitions.abc_1_8  |        2 | a    | 77        | 88
 subpartitions.abc_1 | subpartitions.abc_1_9  |        2 | a    | 88        | 99
 subpartitions.abc_2 | subpartitions.abc_2_1  |        2 | a    | 100       | 111
 subpartitions.abc_2 | subpartitions.abc_2_2  |        2 | a    | 111       | 122
 subpartitions.abc_2 | subpartitions.abc_2_3  |        2 | a    | 122       | 133
 subpartitions.abc_2 | subpartitions.abc_2_4  |        2 | a    | 133       | 144
 subpartitions.abc_2 | subpartitions.abc_2_5  |        2 | a    | 144       | 155
 subpartitions.abc_2 | subpartitions.abc_2_6  |        2 | a    | 155       | 166
 subpartitions.abc_2 | subpartitions.abc_2_7  |        2 | a    | 166       | 177
 subpartitions.abc_2 | subpartitions.abc_2_8  |        2 | a    | 177       | 188
 subpartitions.abc_3 | subpartitions.abc_3_1  |        2 | a    | 200       | 211
 subpartitions.abc_3 | subpartitions.abc_3_2  |        2 | a    | 211       | 222
 subpartitions.abc_3 | subpartitions.abc_3_3  |        2 | a    | 222       | 233
 subpartitions.abc_3 | subpartitions.abc_3_4  |        2 | a    | 233       | 244
 subpartitions.abc_3 | subpartitions.abc_3_5  |        2 | a    | 244       | 255
 subpartitions.abc_3 | subpartitions.abc_3_6  |        2 | a    | 255       | 266
 subpartitions.abc_3 | subpartitions.abc_3_7  |        2 | a    | 266       | 277
 subpartitions.abc_3 | subpartitions.abc_3_8  |        2 | a    | 277       | 288
 subpartitions.abc_3 | subpartitions.abc_3_9  |        2 | a    | 288       | 299
 subpartitions.abc_3 | subpartitions.abc_3_10 |        2 | a    | 299       | 310
 subpartitions.abc_4 | subpartitions.abc_4_1  |        2 | a    | 300       | 350
 subpartitions.abc_4 | subpartitions.abc_4_2  |        2 | a    | 350       | 450
(33 rows)

SELECT append_range_partition('subpartitions.abc_1'::regclass);
 append_range_partition 
------------------------
 subpartitions.abc_1_10
(1 row)

SELECT append_range_partition('subpartitions.abc_1'::regclass);
ERROR:  reached upper bound in the current level of subpartitions
DROP TABLE subpartitions.abc_1_10;
/* detach_range_partition */
SELECt detach_range_partition('subpartitions.abc_1');
ERROR:  could not detach partition if it has children
/* attach_range_partition */
CREATE TABLE subpartitions.abc_c(LIKE subpartitions.abc_1 INCLUDING ALL);
SELECT attach_range_partition('subpartitions.abc_1', 'subpartitions.abc_c', 98, 110); /* fail */
ERROR:  specified range [98, 110) overlaps with existing partitions
SELECT attach_range_partition('subpartitions.abc_1', 'subpartitions.abc_c', 100, 110); /* fail */
ERROR:  "start value" exceeds upper bound of the current level of subpartitions
SELECT attach_range_partition('subpartitions.abc_1', 'subpartitions.abc_c', 99, 110); /* ok */
 attach_range_partition 
------------------------
 subpartitions.abc_c
(1 row)

DROP TABLE subpartitions.abc CASCADE;
NOTICE:  drop cascades to 39 other objects
/* subpartitions on same expression but dates */
CREATE TABLE subpartitions.abc(a DATE NOT NULL);
INSERT INTO subpartitions.abc SELECT '2017-10-02'::DATE + i  FROM generate_series(1, 200, 20) as i;
SELECT create_range_partitions('subpartitions.abc', 'a', '2017-10-02'::DATE, '1 month'::INTERVAL);
 create_range_partitions 
-------------------------
                       6
(1 row)

SELECT create_range_partitions('subpartitions.abc_1', 'a', '2017-10-02'::DATE + 1,
	'32 day'::INTERVAL, 10); /* not multiple, and limited p_count */
WARNING:  "start_value" was set to 10-02-2017
WARNING:  "p_interval" is not multiple of range (10-02-2017, 11-03-2017)
NOTICE:  "p_count" was limited to 1
 create_range_partitions 
-------------------------
                       1
(1 row)

DROP TABLE subpartitions.abc CASCADE;
NOTICE:  drop cascades to 9 other objects
DROP SCHEMA subpartitions CASCADE;
NOTICE:  drop cascades to function subpartitions.partitions_tree(regclass,text)
DROP EXTENSION pg_pathman;
